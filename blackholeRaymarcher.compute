#pragma kernel Main
#pragma kernel ProcessTexture

// 2nd kernel
float evaporateSpeed;
float diffuseSpeed;
float blurRadius;

// Result texture
RWTexture2D<float4> renderTex;
float mipMapLevel;

float time;
float deltaTime;

// Marching
int width;
int height;
int maxSteps;
float stepSize;
float minDist;
float fov;

// Translating + rotation
float3 roOffset;
float3 roRotation;
float3 rdRotation;
float3 sdfRotation;

// Nebula (currently jets from black hole)
Texture3D nebulaTex;
SamplerState samplernebulaTex;
float nebulaScale;
float3 nebulaTwirl;
float nebulaCutoff;

// Fbm noise (currently used for accretion disk)
Texture3D fbmNoiseTex;
SamplerState samplerfbmNoiseTex;
float fbmSpeed;
float fbmDiv;
float fbmH;//for realtime 3D Noise
float fbmOctaves;//for realtime 3D Noise
float3 fbmDirection;
float fbmIntensity;
float3 fbmRotation;


// Lighting and color
Texture2D gradientTex;
SamplerState samplergradientTex;
float2 gradientOffset;
float2 gradientTiling;

float3 lightDirection;
float3 lightColor;
float lightStepSize;
int lightSteps;

float4 ambientLight;
float brightness;

float maxLightDist;
float maxAmbientDist;

float densityScale;
float darknessThreshhold;
float lightAbsorb;
float transmittance;
float shadowStrength;
float ambientStrength;
float4 colorPallete[4];

//! TODO add doppler effect
float dopplerStrength;
float3 dopplerOffset;

// Black hole
float3 blackHolePosition;
float schwarzSchildRadius;
float spaceDistortion;
float4 accretionDiskColor;
float accretionDiskRadius;
float accretionDiskHeight;

//! TODO stars
Texture3D<float4> starTex;
SamplerState samplerstarTex;
Texture2D<float4> starGradient;
SamplerState samplerstarGradient;
float3 starOffset;
float starDiv;
float starBrightness;
float3 starRotation;
float starMinDistance;
float4 starGradientTiling;
float starSaturaiton;

float2x2 rot(float angle)
{
  float s = sin(angle);
  float c = cos(angle);
  return float2x2(c, -s, s, c);
}

void rotateX(inout float3 p, float angle)
{
  p.xy = mul(p.xy, rot(angle));
}

void rotateY(inout float3 p, float angle)
{
  p.xz = mul(p.xz, rot(angle));
}

void rotateZ(inout float3 p, float angle)
{
  p.yz = mul(p.yz, rot(angle));
}

void rotate(inout float3 p, float3 euler)
{
  rotateX(p, euler.x);
  rotateY(p, euler.y);
  rotateZ(p, euler.z);
}

float sdfSubtraction(float d1, float d2)
{
  return max(d1, -d2);
}

float opSmoothSubtraction(float d1, float d2, float k)
{
  float h = clamp(0.5 - 0.5 * (d2 + d1) / k, 0.0, 1.0);
  return lerp(d2, -d1, h) + k * h * (1.0 - h);
}

float getSpaceDistortionLerpValue(float schwarzschildRadius, float distanceToSingularity, float spaceDistortion)
{
  return pow(schwarzschildRadius, spaceDistortion) / pow(distanceToSingularity, spaceDistortion);
}

float distToRoundedCylinder(float3 p, float ra, float rb, float h)
{
  float2 d = float2(length(p.xz) - 2.0 * ra + rb, abs(p.y) - h);
  return min(max(d.x, d.y), 0.0) + length(max(d, 0.0)) - rb;
}

float distToSphere(float3 p, float s)
{
  return length(p) - s;
}

float distToAccretionDisk(float3 p)
{
  float p1 = distToRoundedCylinder(p, accretionDiskRadius, accretionDiskHeight, 0.01);
  float p2 = distToSphere(p, 3.5);
  return opSmoothSubtraction(p2, p1, 0.5);
}

float distToNebula(float3 p, float distToSingularity)
{
  float3 nebulaCoord = p / nebulaScale;

  // Don't let nebula go inside of black hole
  if (distance(nebulaCoord, distToSingularity) < nebulaCutoff)
    return smoothstep(1, 0, distToSingularity);

  rotate(nebulaCoord, radians(sdfRotation));
  rotate(nebulaCoord, radians(nebulaTwirl) * (fbmSpeed * time - distToSingularity));
  nebulaCoord += .5; // centering
  return nebulaTex.SampleLevel(samplernebulaTex, nebulaCoord, mipMapLevel);
}

float distToBlackHole(float3 p, float distToSingularity)
{
  float3 accretionDiskCoord = p;
  float3 accretionDiskRot = float3(90, 0, 90);
  rotate(accretionDiskCoord, radians(accretionDiskRot));

  float3 fbmCoord = p / fbmDiv;
  rotate(fbmCoord, radians(fbmRotation) * (fbmSpeed * time - distToSingularity));
  fbmCoord += (fbmDirection * time);

  float fbmNoise = fbmNoiseTex.SampleLevel(samplerfbmNoiseTex, fbmCoord, mipMapLevel).r * fbmIntensity;

  return distToAccretionDisk(accretionDiskCoord) + fbmNoise;
}

float distToScene(float3 p, float distToSingularity)
{
  float3 nebulaCoord = p;
  rotate(p, radians(sdfRotation));

  float distNebula = distToNebula(nebulaCoord, distToSingularity);
  float distBlackHole = distToBlackHole(p, distToSingularity);

  return sdfSubtraction(distNebula, distBlackHole);
}

float4 raymarch_scene(float3 ro, float3 rd)
{
  float transmission = 0;
  float finalLight = 0;
  float3 lightingResult = float3(0, 0, 0);
  float3 lightVector = normalize(lightDirection) * lightStepSize;

  float3 previousPos = ro;
  float density = 0.0;

  float3 previousRayDir = rd;
  float distanceToSingularity = 99999999;

  float ambientDist = 0;
  float3 ambientOffset1 = float3(0, 0, 0.05);
  float3 ambientOffset2 = float3(0, 0, 0.1);
  float3 ambientOffset3 = float3(0, 0, 0.2);

  for (int i = 0; i < maxSteps; i++)
  {
    distanceToSingularity = distance(blackHolePosition, previousPos);
    // Nothing to do inside of black hole
    if (distanceToSingularity < schwarzSchildRadius + .5)
    {
      break;
    }

    float3 unaffectedDir = normalize(previousRayDir) * stepSize;
    float3 maxAffectedDir = normalize(blackHolePosition - previousPos) * stepSize;
    // Calculate how to interpolate between the two previously calculated vectors
    float lerpValue = getSpaceDistortionLerpValue(schwarzSchildRadius, distanceToSingularity, spaceDistortion);
    float3 newRayDir = normalize(lerp(unaffectedDir, maxAffectedDir, lerpValue)) * stepSize;
    // Move the lightray along and calculate the sdf result
    float3 newPos = previousPos + newRayDir;
    previousPos = newPos;
    previousRayDir = newRayDir;

    // To reduce different operations over distance
    float distToCam = distance(ro, newPos);

    float sdfResult = distToScene(newPos, distanceToSingularity);
    density += sdfResult * densityScale * 0.001;

    if (distToCam <= maxLightDist)
    {

      float lightAccumulation = 0;
      float3 lightRo = newPos;

      for (int j = 0; j < lightSteps; j++)
      {
        lightRo += lightVector;
        float lightDensity = distToScene(lightRo, distanceToSingularity);
        lightAccumulation += lightDensity * shadowStrength;
      }

      if (distToCam <= maxAmbientDist)
      {
        // Ambient lighting with 3 samples
        float s1 = distToScene(newPos + ambientOffset1, distanceToSingularity) * densityScale;
        float s2 = distToScene(newPos + ambientOffset2, distanceToSingularity) * densityScale;
        float s3 = distToScene(newPos + ambientOffset3, distanceToSingularity) * densityScale;
        ambientDist += s1 * s2 * s3;
      }

      float lightTransmission = exp(-lightAccumulation);
      float shadow = darknessThreshhold + lightTransmission * (1.0 - darknessThreshhold);
      finalLight += density * transmittance * shadow;
      transmittance *= exp(-density * lightAbsorb);
    }
  }
  ambientDist *= ambientStrength * 0.001;
  transmission = exp(-density);
  lightingResult = float3(finalLight, transmission, transmittance);

  float2 uv = float2(0, lightingResult.r) * gradientTiling + gradientOffset;
  float4 gradientColor = gradientTex.SampleLevel(samplergradientTex, uv, 0);

  float4 ambientColor = ambientLight * ambientDist;
  float4 col = lightingResult.r * brightness * float4(lightColor, 1) * gradientColor + ambientColor;
  return col;
}

[numthreads(16, 16, 1)]
void Main(uint2 id : SV_DispatchThreadID)
{
  float2 resolution = float2(width, height);

  float2 p = (2.0 * id.xy - resolution.xy) / resolution.y;
  float3 ro = roOffset;
  float3 rd = normalize(float3(p.xy, tan(radians(fov)) / 2.0));

  rotate(ro, radians(roRotation));
  rotate(rd, radians(rdRotation));

  float4 raymarchRes = raymarch_scene(ro, rd);

  renderTex[id] = float4(raymarchRes.rgb, 1);
}

//From Sebastian Lague's Coding adventure: https://youtu.be/X-iSQQgOd1A?t=788
//Just makes a cool effect
[numthreads(8, 8, 1)]
void ProcessTexture(uint2 id : SV_DispatchThreadID)
{

  float4 originalValue = renderTex[id.xy];
  float4 sum = 0;

  for (int offsetX = -blurRadius; offsetX <= blurRadius; offsetX++)
  {
    for (int offsetY = -blurRadius; offsetY <= blurRadius; offsetY++)
    {
      int sampleX = id.x + offsetX;
      int sampleY = id.y + offsetY;

      if (sampleX >= 0 && sampleX < width && sampleY >= 0 && sampleY < height)
      {
        sum += renderTex[int2(sampleX, sampleY)];
      }
    }
  }
  float4 blurResult = sum / 9;

  float4 diffusedValue = lerp(originalValue, blurResult, diffuseSpeed * deltaTime);
  float4 diffusedAndEvporatedValue = max(0, diffusedValue - evaporateSpeed * deltaTime);

  renderTex[id.xy] = diffusedAndEvporatedValue;
}
